package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"strconv"

	mt "github.com/txaty/go-merkletree"
	"golang.org/x/crypto/sha3"
)

// Keccak256 is the Keccak-256 hashing method
type Keccak256 struct{}

// New creates a new Keccak-256 hashing method
func New() *Keccak256 {
	return &Keccak256{}
}

// Hash generates a Keccak-256 hash from a byte array
func (h *Keccak256) Hash2(data []byte) []byte {
	hash := sha3.NewLegacyKeccak256()
	hash.Write(data)
	return hash.Sum(nil)
}

// Hash generates a Keccak-256 hash from a byte array
func Hash(data []byte) ([]byte, error) {
	hash := sha3.NewLegacyKeccak256()
	hash.Write(data)
	return hash.Sum(nil), nil
}

// first define a data structure with Serialize method to be used as data block
type testData struct {
	data []byte
}

func (t *testData) Serialize() ([]byte, error) {
	return t.data, nil
}

func main() {
	blocks := make([]mt.DataBlock, 0)

	for i := 0; i < 10; i++ {
		block := &testData{
			data: []byte("0x3194971Af2620267083924c6184ac5b1e7eE036D"),
		}
		blocks = append(blocks, block)
	}
	fmt.Println("end")

	// the first argument is config, if it is nil, then default config is adopted

	c := &mt.Config{
		HashFunc: func(data []byte) ([]byte, error) {

			h := sha3.NewLegacyKeccak256()
			h.Write(data)
			hash := h.Sum(nil)
			fmt.Printf("%x\n", hash) // b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6

			return hash, nil
		},
	}

	tree, err := mt.New(c, blocks)
	handleError(err)
	// get proofs
	proofs := tree.Proofs
	// verify the proofs
	for i := 0; i < len(proofs); i++ {
		fmt.Println(i)
		ok, err := tree.Verify(blocks[i], proofs[i])
		if !ok {
			panic("error checking proof")
		}
		handleError(err)
		fmt.Println(proofs[i])

		s2 := strconv.Itoa(i)

		file, _ := json.MarshalIndent(proofs[i], "", " ")
		_ = ioutil.WriteFile(s2+".json", file, 0644)
	}
	// or you can also verify the proofs without the tree but with Merkle root
	// obtain the Merkle root
	rootHash := tree.Root
	for i := 0; i < len(blocks); i++ {
		// if hashFunc is nil, use SHA256 by default
		ok, err := mt.Verify(blocks[i], proofs[i], rootHash, nil)
		handleError(err)
		fmt.Println(ok)
	}
}

func handleError(err error) {
	if err != nil {
		panic(err)
	}
}
